//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/OtherPlayerControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OtherPlayerControler : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OtherPlayerControler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OtherPlayerControler"",
    ""maps"": [
        {
            ""name"": ""FlyMovement"",
            ""id"": ""b12522d6-76c8-4031-ad23-365d25a54aab"",
            ""actions"": [
                {
                    ""name"": ""MoveDirection"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a505c570-af1b-4f96-a7a3-3469bb6dd8ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookDirection"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6754c203-7122-46bc-8656-7cb85434d9b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d36df9c6-2079-4092-9fe7-141d3b73ed6b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8626866f-bf79-4a50-82bf-ab67051fcd0b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a1303c84-00dc-49b3-9b38-4d24d403ecd5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd9fdd50-56fc-485e-a25c-98e72bf536d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""95024571-d695-4e07-a01b-c0747d53de0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f10c6358-709b-43b8-ae38-37a799d28b17"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3db3b4b-ab89-4c6a-9f9f-412393fe30d7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0bd78af-c5da-44cc-b7a8-3f17ec43088b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlyMovement
        m_FlyMovement = asset.FindActionMap("FlyMovement", throwIfNotFound: true);
        m_FlyMovement_MoveDirection = m_FlyMovement.FindAction("MoveDirection", throwIfNotFound: true);
        m_FlyMovement_LookDirection = m_FlyMovement.FindAction("LookDirection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlyMovement
    private readonly InputActionMap m_FlyMovement;
    private IFlyMovementActions m_FlyMovementActionsCallbackInterface;
    private readonly InputAction m_FlyMovement_MoveDirection;
    private readonly InputAction m_FlyMovement_LookDirection;
    public struct FlyMovementActions
    {
        private @OtherPlayerControler m_Wrapper;
        public FlyMovementActions(@OtherPlayerControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDirection => m_Wrapper.m_FlyMovement_MoveDirection;
        public InputAction @LookDirection => m_Wrapper.m_FlyMovement_LookDirection;
        public InputActionMap Get() { return m_Wrapper.m_FlyMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyMovementActions set) { return set.Get(); }
        public void SetCallbacks(IFlyMovementActions instance)
        {
            if (m_Wrapper.m_FlyMovementActionsCallbackInterface != null)
            {
                @MoveDirection.started -= m_Wrapper.m_FlyMovementActionsCallbackInterface.OnMoveDirection;
                @MoveDirection.performed -= m_Wrapper.m_FlyMovementActionsCallbackInterface.OnMoveDirection;
                @MoveDirection.canceled -= m_Wrapper.m_FlyMovementActionsCallbackInterface.OnMoveDirection;
                @LookDirection.started -= m_Wrapper.m_FlyMovementActionsCallbackInterface.OnLookDirection;
                @LookDirection.performed -= m_Wrapper.m_FlyMovementActionsCallbackInterface.OnLookDirection;
                @LookDirection.canceled -= m_Wrapper.m_FlyMovementActionsCallbackInterface.OnLookDirection;
            }
            m_Wrapper.m_FlyMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDirection.started += instance.OnMoveDirection;
                @MoveDirection.performed += instance.OnMoveDirection;
                @MoveDirection.canceled += instance.OnMoveDirection;
                @LookDirection.started += instance.OnLookDirection;
                @LookDirection.performed += instance.OnLookDirection;
                @LookDirection.canceled += instance.OnLookDirection;
            }
        }
    }
    public FlyMovementActions @FlyMovement => new FlyMovementActions(this);
    public interface IFlyMovementActions
    {
        void OnMoveDirection(InputAction.CallbackContext context);
        void OnLookDirection(InputAction.CallbackContext context);
    }
}
